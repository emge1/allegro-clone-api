name: CI Pipeline

on:
  push:
    branches:
      - "**"
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main

env:
  REPO_URL: emge1/allegro-clone-api
  REPO_BRANCH: ${{ github.head_ref || github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH  }}

      - name: Lint Code
        run: echo "This step currently in progress"

      - name: Build Docker Image
        run: |
          docker build --build-arg REQUIREMENTS=requirements/development.txt -t ci-image .

      - name: Security scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: ci-image
          severity: CRITICAL
          ignore-unfixed: true
          format: json
          output: trivy-report.json

      - name: Upload Trivy scan report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-report
          path: trivy-report.json

      - name: Save Docker image
        run: docker save ci-image > ci-image.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: ci-image
          path: ci-image.tar

  unit-tests:
    runs-on: ubuntu-latest
    needs: build
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image

      - name: Load Docker image
        run: docker load < ci-image.tar

      - name: Run Unit Tests
        run: |
          docker run --rm --user root \
            -e DJANGO_SETTINGS_MODULE=config.settings.ci \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e ENVIRONMENT=${{ secrets.ENVIRONMENT }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --entrypoint "" \
            ci-image \
            sh -c "
              python manage.py makemigrations &&
              python manage.py migrate &&
              pytest -m 'not integration' --junitxml=test-reports/unit.xml
            "

      - name: Upload Unit Test Report
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-report
          path: test-reports/unit.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: build
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image

      - name: Load Docker image
        run: docker load < ci-image.tar

      - name: Run Integration Tests
        run: |
          docker run --rm --user root \
            -e DJANGO_SETTINGS_MODULE=config.settings.ci \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e ENVIRONMENT=${{ secrets.ENVIRONMENT }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --entrypoint "" \
            ci-image \
            sh -c "
              python manage.py makemigrations &&
              python manage.py migrate &&
              pytest -m 'integration' --junitxml=test-reports/integration.xml
            "

      - name: Upload Integration Test Report
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-report
          path: test-reports/integration.xml

  e2e-tests:
    runs-on: ubuntu-latest
    needs: build
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci

    steps:
      - name: Run E2E Tests
        run: echo "This step currently in progress"

      - name: Upload E2E Test Report
        run: echo "This step currently in progress"


  post-checks:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    env:
      DJANGO_SETTINGS_MODULE: config.settings.ci

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: ci-image

      - name: Load Docker image
        run: docker load < ci-image.tar

      - name: Set Docker Tags
        if: success() && startsWith(github.ref, 'refs/tags/')
        id: docker_tags
        run: |
          echo "sha_tag=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "ref_tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "ref_tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      - name: Login to DockerHub
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Tag Docker Image
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag ci-image ${{ secrets.DOCKERHUB_USERNAME }}/clone-api:${{ steps.docker_tags.outputs.sha_tag }}
          docker tag ci-image ${{ secrets.DOCKERHUB_USERNAME }}/clone-api:${{ steps.docker_tags.outputs.ref_tag }}

      - name: Push Docker Image to DockerHub
        if: success() && startsWith(github.ref, 'refs/tags/')
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/clone-api:${{ steps.docker_tags.outputs.sha_tag }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/clone-api:${{ steps.docker_tags.outputs.ref_tag }}

      - name: Clean up Docker
        if: always()
        run: |
          docker stop $(docker ps -q) || true
          docker rm $(docker ps -aq) || true
          docker network prune -f

      - name: Clean Workspace
        if: always()
        run: |
          docker run --rm --user root \
            -e DJANGO_SETTINGS_MODULE=config.settings.ci \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            -e ENVIRONMENT=${{ secrets.ENVIRONMENT }} \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            --entrypoint "" \
            ci-image \
            sh -c "rm -rf /workspace/*"

      - name: Success Message
        if: success()
        run: echo "CI Pipeline successfully completed"

      - name: Failure Message
        if: failure()
        run: echo "CI Pipeline unsuccessful"